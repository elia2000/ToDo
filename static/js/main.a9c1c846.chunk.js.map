{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/Checker.js","components/AddOn.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","hide","this","TodoStore","todos","find","currentValue","index","splice","observable","action","push","lastID","TodoEntry","observer","state","value","todoStore","className","onChange","event","setState","target","onKeyDown","keyCode","preventDefault","addTodo","type","placeholder","Component","TodoItem","onToggle","props","todo","toggle","onClick","checked","onDestroy","destroy","TodoItems","map","rendder","checker","todoLength","length","inter","setInterval","itemleft","AddOn","click","document","getElementById","console","log","innerHTML","href","i","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9c1c846.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport TodoStore from \"./TodoStore\";\r\n\r\nexport default class TodoModel {\r\n  store;\r\n  id;\r\n  @observable title;\r\n  @observable completed;\r\n  @observable hide;\r\n\r\n  constructor(store, title, completed, id, hide) {\r\n    this.id = id;\r\n    this.title = title;\r\n    this.completed = completed;\r\n    this.store = store;\r\n    this.hide = hide;\r\n  }\r\n\r\n  @action\r\n  toggle() {\r\n    this.completed = !this.completed;\r\n  }\r\n\r\n  @action\r\n  destroy(id) {\r\n    TodoStore.todos.find((currentValue, index) => {\r\n      if (currentValue.id == id) {\r\n        return TodoStore.todos.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n}","import { observable, action } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport TodoModel from \"./TodoModel\";\r\n\r\n// @observer\r\nclass TodoStore {\r\n  @observable todos = [];\r\n  @observable id;\r\n  @observable lastID = 0;\r\n  @observable itemleft = 0;\r\n\r\n  // setInterval(() => {\r\n  //   todos.map(()=>{\r\n  //     if (todo.completed == true) {\r\n  //       console.log(this.itemleft++)\r\n  //   }\r\n  //   });\r\n  // }, 100);\r\n\r\n  @action\r\n  addTodo(title) {\r\n    this.todos.push(\r\n      new TodoModel(this, title, false, this.lastID++, false, false)\r\n    );\r\n  }\r\n}\r\nconst store = new TodoStore();\r\nexport default store;\r\n\r\n// ************************PLAN 2************************\r\n// constructor() {}\r\n\r\n// delTodo(id) {\r\n//   this.todos.filter(value => {\r\n//     if (this.todos[key].arrayStore[0] === id) {\r\n//       this.todos.splice(key - 1, 1);\r\n//     } else {\r\n//       console.log(\r\n//         \"can't find the id!/nid is: \",\r\n//         id,\r\n//         \"/nand now key is: \",\r\n//         key\r\n//       );\r\n//     }\r\n//   });\r\n// console.log(\"hi\");\r\n// console.log(this.todos.length);\r\n// debugger;\r\n// this.todos.length > 1 ? this.todos.splice(id - 1, 1) : this.todos.splice(0);\r\n// }\r\n","import React, { Component } from \"react\";\r\nimport { observable, action } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \"\"\r\n  };\r\n  render() {\r\n    let { todos } = todoStore;\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>ToDo</h1>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={event => {\r\n            this.setState({\r\n              value: event.target.value\r\n            });\r\n          }}\r\n          onKeyDown={event => {\r\n            if (event.keyCode !== 13) {\r\n              return;\r\n            }\r\n            event.preventDefault();\r\n            todoStore.addTodo(this.state.value);\r\n            this.setState({\r\n              value: \"\"\r\n            });\r\n          }}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What need to done?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable, action } from \"mobx\";\r\nimport TodoStore from \"../stores/TodoStore\";\r\nimport TodoModel from \"../stores/TodoModel\";\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n  onToggle = () => {\r\n    this.props.todo.toggle();\r\n  };\r\n\r\n  @action\r\n  onDestroy = todo => {\r\n    this.props.todo.destroy(todo.id);\r\n  };\r\n\r\n  render() {\r\n    this.todo = this.props.todo;\r\n    if (this.todo.hide == false) {\r\n      return (\r\n        <li className={this.todo.completed ? \"completed\" : \" \"}>\r\n          <div className=\"view\">\r\n            <input\r\n              onClick={this.onToggle}\r\n              type=\"checkbox\"\r\n              className=\"toggle\"\r\n              value=\"on\"\r\n              checked={this.todo.completed}\r\n            />\r\n            <label>{this.todo.title}</label>\r\n            <button\r\n              className=\"destroy\"\r\n              onClick={event => {\r\n                this.onDestroy(this.todo);\r\n              }}\r\n            ></button>\r\n          </div>\r\n        </li>\r\n      );\r\n    } else {\r\n      return <li></li>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem.js\";\r\nimport TodoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, observable } from \"mobx\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n  todos = TodoStore.todos;\r\n  @observable todos;\r\n\r\n  @action\r\n  rendder(todo) {\r\n    return [\r\n      <li>\r\n        <TodoItem todo={todo} />\r\n      </li>\r\n    ];\r\n    // }\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {this.todos.map(todo => {\r\n            return this.rendder(todo);\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItems;","import { observable, action } from \"mobx\";\r\nimport TodoStore from \"../stores/TodoStore\";\r\n\r\nclass Checker {\r\n  @observable todoLength;\r\n  @observable itemleft = 0;\r\n  constructor() {\r\n    this.todoLength = TodoStore.todos.length;\r\n    this.inter = setInterval(() => {\r\n      this.todoLength = TodoStore.todos.length;\r\n      this.itemleft = 0;\r\n      TodoStore.todos.map(todo => {\r\n        if (todo.completed == false) {\r\n          this.itemleft = this.itemleft + 1;\r\n        }\r\n      });\r\n    }, 1);\r\n  }\r\n  \r\n}\r\n\r\nconst checker = new Checker();\r\nexport default checker;\r\n","import React, { Component } from \"react\";\r\nimport TodoStore from \"../stores/TodoStore\";\r\nimport checker from \"./Checker\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action } from \"mobx\";\r\n\r\n@observer\r\nclass AddOn extends Component {\r\n  render() {\r\n    function click(event) {\r\n      // apperiance\r\n      document.getElementById(\"1\").className = \"\";\r\n      document.getElementById(\"2\").className = \"\";\r\n      document.getElementById(\"3\").className = \"\";\r\n      event.target.className = \"selected\";\r\n      // action\r\n      // ****** All\r\n      console.log(event.target.innerHTML);\r\n      if (event.target.innerHTML == \"All\") {\r\n        TodoStore.todos.map(todo => {\r\n          todo.hide = false;\r\n        });\r\n        // ****** Active\r\n      } else if (event.target.innerHTML == \"Active\") {\r\n        TodoStore.todos.map(todo => {\r\n          if (todo.completed == false) {\r\n            todo.hide = false;\r\n          } else {\r\n            todo.hide = true;\r\n          }\r\n          console.log(todo.hide);\r\n        });\r\n        // ****** Complete\r\n      } else if (event.target.innerHTML == \"Complete\") {\r\n        TodoStore.todos.map(todo => {\r\n          if (todo.completed == true) {\r\n            todo.hide = false;\r\n          } else {\r\n            todo.hide = true;\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function destroyAddOn() {\r\n      for (let i = 0; i < TodoStore.todos.length; i++) {\r\n        TodoStore.todos.map((todo, index) => {\r\n          if (todo.completed == true) {\r\n            TodoStore.todos.splice(index, 1);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return [\r\n      <footer className=\"footer\">\r\n        <div className=\"todo-count\">{`${checker.itemleft} items left`}</div>\r\n        <div className=\"filters\">\r\n          <li>\r\n            <a href=\"#\" className=\"selected\" id=\"1\" onClick={click}>\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" className=\"\" id=\"2\" onClick={click}>\r\n              Active\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" className=\"\" id=\"3\" onClick={click}>\r\n              Complete\r\n            </a>\r\n          </li>\r\n        </div>\r\n        <div className=\"clear-completed\" onClick={destroyAddOn}>\r\n          Clear Complete\r\n        </div>\r\n        <div className=\"info\">\r\n          <a href=\"https://github.com/elia2000\">My Info</a>\r\n        </div>\r\n      </footer>\r\n    ];\r\n  }\r\n}\r\n\r\nexport default AddOn;\r\n","import React, { Component } from \"react\";\r\nimport TodoEntry from \"./components/TodoEntry\";\r\nimport TodoItems from \"./components/TodoItems\";\r\nimport checker from \"./components/Checker\";\r\nimport AddOn from \"./components/AddOn\";\r\nimport { observer } from \"mobx-react\";\r\nimport \"./App.css\";\r\n\r\n@observer\r\nclass App extends Component {\r\n\r\n  render() {\r\n    if (checker.todoLength != 0) {\r\n      return (\r\n        <div id=\"todoapp\" className=\"todoapp\">\r\n          <TodoEntry />\r\n          <TodoItems />\r\n          <AddOn />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div id=\"todoapp\" className=\"todoapp\">\r\n          <TodoEntry />\r\n          <TodoItems />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}